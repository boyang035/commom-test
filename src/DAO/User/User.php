<?php

namespace rrzj\commom\DAO\User;

use common\models\Debug;
use common\models\v2\OperateActivity;
use yii\behaviors\TimestampBehavior;
use yii\db\ActiveRecord;
use yii\db\Exception;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "user".
 *
 * @property int $id
 * @property string $phone 手机
 * @property string $username 手机
 * @property string $avatar 头像
 * @property string $access_token 令牌
 * @property string $auth_key
 * @property string $password_hash
 * @property int $status 10为有效
 * @property string $role 角色
 * @property int $server_id 商户id
 * @property int $notify_num 通知数量
 * @property int $msg_num 新消息数
 * @property string $burse_num 钱包
 * @property int $point_num 积分
 * @property int $created_at
 * @property int $updated_at
 */
class User extends ActiveRecord implements IdentityInterface
{
    const STATUS_DELETED = 0;
    const STATUS_NORMAL = 10;
    const STATUS_CANCELLATION = 9;
    const STATUS_ACTIVE = 10;
    const LOGIN_AUTH_TIME = 3600; // 登录有效时长单位3600秒

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @param bool $insert 是否为新增
     * @param array $changedAttributes array 改变的属性
     * @throws Exception
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        // 注册后获取游客时领取的红包
        $api = new OperateActivity();
        $result = $api->bindGuestGift($this->phone);
        if ($result['status'] > 0) {
            Debug::logV3('注册领红包失败,错误原因:' . json_encode($result), 'bindGuestGift.log');
        }
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'status', 'server_id', 'notify_num', 'created_at', 'updated_at', 'msg_num', 'point_num'], 'integer'],
            [['role'], 'string'],
            [['phone'], 'string', 'max' => 11],
            [['username', 'password_hash'], 'string', 'max' => 255],
            [['avatar'], 'string', 'max' => 200],
            [['auth_key'], 'string', 'max' => 32],
            [['phone'], 'unique'],
            [['burse_num'], 'double'],
            ['access_token', 'string', 'max' => 60],
            ['status', 'default', 'value' => self::STATUS_ACTIVE],
            ['status', 'in', 'range' => [self::STATUS_ACTIVE, self::STATUS_DELETED]],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels(): array
    {
        return [
            'id'            => 'ID',
            'phone'         => '手机',
            'username'      => '用户名',
            'avatar'        => '头像',
            'access_token'  => '令牌',
            'auth_key'      => '',
            'password_hash' => 'hash密码',
            'status'        => '状态',
            'role'          => '角色',
            'server_id'     => '商家ID',
            'notify_num'    => '通知数量',
            'msg_num'       => '新消息数',
            'burse_num'     => '钱包',
            'point_num'     => '积分',
            'created_at'    => '注册时间',
            'updated_at'    => '更新时间',
        ];
    }

    /**
     * @inheritdoc
     */
    public static function findIdentity($id)
    {
        return static::findOne(['id' => $id, 'status' => self::STATUS_ACTIVE]);
    }

    /**
     * @inheritdoc
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['access_token' => $token]);
    }

    /**
     * @inheritdoc
     */
    public function getId()
    {
        return $this->getPrimaryKey();
    }

    /**
     * @inheritdoc
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @inheritdoc
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }
}
